0.8.1
-----

Fix bug causing loss of all types in a CTF container if the container has
a parent and ctf_rollback() is called.  (Only the types since the last
ctf_snapshot() should be removed, not every type.)

0.8.0
-----

Support for ARM64.

A new #define is provided, CTF_CHAR, which can be used to produce a char type
with the same signedness as the system's native char type.

0.7.0
-----

Support creation and use of "CTF archives" that contain any number of CTF files
in an efficient, endian-independent, mmap()able representation.  A new tool,
ctf_ar, supports listing and extraction of CTF files from these archives,
for debugging.

libdtrace-ctf now supports not only reading compressed archives but also their
creation, through the new function ctf_compress_write().

0.6.0
-----

Support multiple types with the same name where only one is a root type better
(as seen in the definition of bitfields).  This introduces additional error
checking which may break situations in which multiple root types with the same
name but different definitions.  All such situations are undefined: previously,
libdtrace-ctf would have returned either the last such type defined or a random
one depending on which API function was used.

0.5.0
-----

libdtrace-ctf is now compatible with big-endian systems (like SPARC).

0.4.3
-----

A pair of new functions, ctf_snapshot() and ctf_rollback(), provide type-
and-variable discarding functionality like that ctf_discard() did, but
without the expense of calling ctf_update() to get a point to discard to.

0.4.2
-----

The build system is now compatible with GNU Make 4.0.

0.4.1
-----

A bug causing reads of unintialized memory is fixed.

ctf_dump is much more useful, dumping information on structure and union members
recursively, and supporting a couple of extra flags that may be useful when
driving ctf_dump from another process.

0.4.0
-----

ctf_dump, a new CTF dumping tool, is introduced.  It is meant for debugging,
so it is built by default, but not installed.

A new function for iterating over variables stored in a CTF file,
ctf_variable_iter(), is introduced.  Iteration fails immediately if
this is a child CTF file with no associated parent.

0.3.3
-----

A failed ctf_lookup_by_id() of a type which should have been found in a parent
container now sets the errno on the CTF file on which the lookup was initiated,
rather than mistakenly setting it on its parent.

0.3.2
-----

CTF sections are now named .ctf by default, not .dtrace_ctf: this package is
not dependent on DTrace.

0.3
---

First release.
